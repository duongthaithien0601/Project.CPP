#include<bits/stdc++.h>
using namespace std;

// Ty le quy doi
const double DOLLARS_PER_POINT = 10.0; // 10 do = 1 diem

// Lop Vi
class Wallet {
public:
    int walletId;
    int balance;
    vector<string> transactionLog;

    Wallet() : walletId(-1), balance(0) {}
    Wallet(int id, int initialBalance = 0) : walletId(id), balance(initialBalance) {}
};

// Lop Nguoi dung
class User {
public:
    string username;
    string passwordHash;
    string fullName;
    string email;
    int walletId;
    bool isManager;
    bool isAutoGenerated;

    User() : username(""), passwordHash(""), fullName(""), email(""), walletId(-1), 
             isManager(false), isAutoGenerated(false) {}
    
    User(string uname, string pwd, string name, string mail, int wId, bool manager = false)
        : username(uname), passwordHash(pwd), fullName(name), email(mail), walletId(wId),
          isManager(manager), isAutoGenerated(false) {}
};

// Danh sach nguoi dung va vi
unordered_map<string, User> users;
unordered_map<int, Wallet> wallets;

// Ham bam mat khau (gia lap voi salt don gian)
string hashPassword(string password) {
    hash<string> hasher;
    string salt = "simpleSalt123";
    return to_string(hasher(password + salt));
}

// Sinh mat khau ngau nhien
string sinhMatKhauNgauNhien() {
    string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    string pwd;
    srand(time(0));
    for (int i = 0; i < 8; i++) {
        pwd += chars[rand() % chars.size()];
    }
    return pwd;
}

// Sinh OTP
string sinhOTP() {
    srand(time(0));
    string otp = "";
    for (int i = 0; i < 6; i++) {
        otp += to_string(rand() % 10);
    }
    return otp;
}

// Luu du lieu vao file (dang van ban)
void luuDuLieu() {
    ofstream userFile("users.txt");
    if (!userFile.is_open()) {
        cerr << "Loi: Khong the mo users.txt de ghi!\n";
        return;
    }
    for (const auto& pair : users) {
        const User& user = pair.second;
        userFile << user.username << "|"
                 << user.passwordHash << "|"
                 << user.fullName << "|"
                 << user.email << "|"
                 << user.walletId << "|"
                 << (user.isManager ? "1" : "0") << "|"
                 << (user.isAutoGenerated ? "1" : "0") << "\n";
    }
    userFile.close();

    ofstream walletFile("wallets.txt");
    if (!walletFile.is_open()) {
        cerr << "Loi: Khong the mo wallets.txt de ghi!\n";
        return;
    }
    for (const auto& pair : wallets) {
        const Wallet& wallet = pair.second;
        walletFile << wallet.walletId << "|"
                   << wallet.balance << "|";
        for (size_t i = 0; i < wallet.transactionLog.size(); ++i) {
            walletFile << wallet.transactionLog[i];
            if (i < wallet.transactionLog.size() - 1) walletFile << ";";
        }
        walletFile << "\n";
    }
    walletFile.close();

#ifdef _WIN32
    system("copy users.txt backup_users.txt >nul 2>&1");
    system("copy wallets.txt backup_wallets.txt >nul 2>&1");
#else
    system("cp users.txt backup_users.txt >/dev/null 2>&1");
    system("cp wallets.txt backup_wallets.txt >/dev/null 2>&1");
#endif
    cout << "Du lieu da duoc luu va sao luu.\n";
}

// Doc du lieu tu file (dang van ban)
bool docDuLieuTuFile(const string& userFileName, const string& walletFileName) {
    users.clear();
    wallets.clear();

    ifstream userFile(userFileName);
    if (userFile.is_open()) {
        string line;
        while (getline(userFile, line)) {
            stringstream ss(line);
            string username, passwordHash, fullName, email;
            int walletId;
            bool isManager, isAutoGenerated;

            getline(ss, username, '|');
            getline(ss, passwordHash, '|');
            getline(ss, fullName, '|');
            getline(ss, email, '|');
            ss >> walletId;
            ss.ignore(1);
            ss >> isManager;
            ss.ignore(1);
            ss >> isAutoGenerated;

            users.emplace(username, User(username, passwordHash, fullName, email, walletId, isManager));
            users[username].isAutoGenerated = isAutoGenerated;
        }
        userFile.close();
    } else {
        cout << "Khong tim thay du lieu nguoi dung trong " << userFileName << ". Bat dau moi.\n";
        return false;
    }

    ifstream walletFile(walletFileName);
    if (walletFile.is_open()) {
        string line;
        while (getline(walletFile, line)) {
            stringstream ss(line);
            int walletId, balance;
            string transactions;

            ss >> walletId;
            ss.ignore(1);
            ss >> balance;
            ss.ignore(1);
            getline(ss, transactions);

            Wallet wallet(walletId, balance);
            if (!transactions.empty()) {
                stringstream transStream(transactions);
                string trans;
                while (getline(transStream, trans, ';')) {
                    wallet.transactionLog.push_back(trans);
                }
            }
            wallets.emplace(walletId, wallet);
        }
        walletFile.close();
    } else {
        cout << "Khong tim thay du lieu vi trong " << walletFileName << ". Bat dau moi.\n";
        return false;
    }
    return true;
}

// Tai du lieu, thu tu file chinh, neu that bai thi tu file sao luu
void taiDuLieu() {
    if (!docDuLieuTuFile("users.txt", "wallets.txt")) {
        cout << "Dang thu tai tu ban sao luu...\n";
        if (!docDuLieuTuFile("backup_users.txt", "backup_wallets.txt")) {
            cout << "File sao luu khong tim thay. Bat dau moi.\n";
        } else {
            cout << "Du lieu da duoc tai tu ban sao luu.\n";
        }
    } else {
        cout << "Du lieu da duoc tai thanh cong.\n";
    }
}

// Khai bao ham truoc khi su dung
void doiMatKhau(string username);
void capNhatThongTinBoiQuanLy(string manager, string targetUser);
void napDiem(string username);

// Dang ky nguoi dung
void dangKy(bool byManager = false) {
    string username, password, fullName, email;
    cout << "Nhap ten dang nhap: ";
    cin >> username;
    if (users.find(username) != users.end()) {
        cout << "Nguoi dung da ton tai!\n";
        return;
    }

    cout << "Nhap ho ten: ";
    cin.ignore();
    getline(cin, fullName);
    cout << "Nhap email: ";
    cin >> email;

    if (byManager) {
        password = sinhMatKhauNgauNhien();
        cout << "Mat khau tu sinh: " << password << "\n";
    } else {
        cout << "Nhap mat khau: ";
        cin >> password;
    }

    string otp = sinhOTP();
    cout << "OTP dang ky: " << otp << "\nNhap OTP: ";
    string enteredOtp;
    cin >> enteredOtp;

    if (enteredOtp != otp) {
        cout << "OTP khong hop le! Dang ky that bai.\n";
        return;
    }

    int walletId = wallets.size();
    users.emplace(username, User(username, hashPassword(password), fullName, email, walletId));
    wallets.emplace(walletId, Wallet(walletId));
    if (byManager) users[username].isAutoGenerated = true;
    luuDuLieu();
    cout << "Dang ky thanh cong!\n";
}

// Dang nhap
bool dangNhap(string& loggedInUser) {
    string username, password;
    cout << "Nhap ten dang nhap: ";
    cin >> username;
    cout << "Nhap mat khau: ";
    cin >> password;

    auto it = users.find(username);
    if (it == users.end() || it->second.passwordHash != hashPassword(password)) {
        cout << "Ten dang nhap hoac mat khau sai!\n";
        return false;
    }
    if (it->second.isAutoGenerated) {
        cout << "Lan dang nhap dau voi mat khau tu sinh. Vui long doi mat khau.\n";
        doiMatKhau(username);
    }
    loggedInUser = username;
    cout << "Dang nhap thanh cong!\n";
    return true;
}

// Doi mat khau
void doiMatKhau(string username) {
    auto it = users.find(username);
    if (it == users.end()) {
        cout << "Nguoi dung khong tim thay!\n";
        return;
    }

    string newPassword, otp = sinhOTP();
    cout << "OTP doi mat khau: " << otp << "\nNhap OTP: ";
    string enteredOtp;
    cin >> enteredOtp;

    if (cin.fail() || enteredOtp != otp) {
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        cout << "OTP khong hop le!\n";
        return;
    }

    cout << "Nhap mat khau moi: ";
    cin >> newPassword;
    if (cin.fail()) {
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        cout << "Nhap sai!\n";
        return;
    }

    it->second.passwordHash = hashPassword(newPassword);
    it->second.isAutoGenerated = false;
    luuDuLieu();
    cout << "Doi mat khau thanh cong!\n";
}

// Cap nhat thong tin ca nhan (nguoi dung tu cap nhat)
void capNhatThongTin(string username) {
    auto it = users.find(username);
    if (it == users.end()) return;

    string newName, newEmail, otp = sinhOTP();
    cout << "OTP cap nhat thong tin: " << otp << "\nNhap OTP: ";
    string enteredOtp;
    cin >> enteredOtp;

    if (enteredOtp != otp) {
        cout << "OTP khong hop le!\n";
        return;
    }

    cout << "Nhap ho ten moi: ";
    cin.ignore();
    getline(cin, newName);
    cout << "Nhap email moi: ";
    cin >> newEmail;
    it->second.fullName = newName;
    it->second.email = newEmail;
    luuDuLieu();
    cout << "Thong tin da duoc cap nhat!\n";
}

// Cap nhat thong tin boi quan ly (gui OTP xac nhan den chu tai khoan)
void capNhatThongTinBoiQuanLy(string manager, string targetUser) {
    if (!users[manager].isManager) {
        cout << "Chi quan ly moi co the cap nhat thong tin!\n";
        return;
    }

    auto it = users.find(targetUser);
    if (it == users.end()) {
        cout << "Nguoi dung muc tieu khong tim thay!\n";
        return;
    }

    // Quan ly nhap thong tin moi
    string newName, newEmail;
    cout << "Nhap ho ten moi cho " << targetUser << ": ";
    cin.ignore();
    getline(cin, newName);
    cout << "Nhap email moi cho " << targetUser << ": ";
    cin >> newEmail;

    // Hien thi thong tin thay doi de xac nhan
    cout << "\nThay doi de xuat cho " << targetUser << ":\n";
    cout << "Ho ten moi: " << newName << "\n";
    cout << "Email moi: " << newEmail << "\n";

    // Gui OTP den chu tai khoan (mo phong bang cach yeu cau nhap OTP)
    string otp = sinhOTP();
    cout << "OTP gui den " << targetUser << ": " << otp << "\n";
    cout << "Vui long yeu cau " << targetUser << " nhap OTP de xac nhan: ";
    string enteredOtp;
    cin >> enteredOtp;

    if (enteredOtp != otp) {
        cout << "OTP khong hop le! Cap nhat bi huy.\n";
        return;
    }

    // Cap nhat thong tin neu OTP hop le
    it->second.fullName = newName;
    it->second.email = newEmail;
    luuDuLieu();
    cout << "Thong tin nguoi dung da duoc cap nhat boi quan ly va xac nhan boi " << targetUser << "!\n";
}

// Nap diem (10 do = 1 diem)
void napDiem(string username) {
    auto it = users.find(username);
    if (it == users.end()) {
        cout << "Nguoi dung khong tim thay!\n";
        return;
    }

    int walletId = it->second.walletId;
    auto walletIt = wallets.find(walletId);
    if (walletIt == wallets.end()) {
        cout << "Vi khong tim thay!\n";
        return;
    }

    double dollars;
    cout << "Nhap so tien nap (tinh bang do, 10 do = 1 diem): ";
    if (!(cin >> dollars)) {
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        cout << "So tien khong hop le!\n";
        return;
    }

    if (dollars <= 0) {
        cout << "So tien phai lon hon 0!\n";
        return;
    }

    string otp = sinhOTP();
    cout << "OTP nap diem: " << otp << "\nNhap OTP: ";
    string enteredOtp;
    cin >> enteredOtp;

    if (enteredOtp != otp) {
        cout << "OTP khong hop le! Nap diem bi huy.\n";
        return;
    }

    int points = static_cast<int>(dollars / DOLLARS_PER_POINT);
    if (points == 0) {
        cout << "So tien qua nho de quy doi thanh diem (toi thieu 10 do)!\n";
        return;
    }

    Wallet& wallet = walletIt->second;
    wallet.balance += points;
    string log = "Nap " + to_string(points) + " diem (" + to_string(dollars) + " do) luc " + to_string(time(0));
    wallet.transactionLog.push_back(log);
    luuDuLieu();
    cout << "Nap thanh cong " << points << " diem!\n";
}

// Chuyen diem
void chuyenDiem(string fromUser, string toUser, int amount) {
    auto sender = users.find(fromUser);
    auto receiver = users.find(toUser);
    if (sender == users.end() || receiver == users.end()) {
        cout << "Nguoi dung khong ton tai!\n";
        return;
    }

    int fromWalletId = sender->second.walletId;
    int toWalletId = receiver->second.walletId;

    auto walletAIt = wallets.find(fromWalletId);
    auto walletBIt = wallets.find(toWalletId);
    if (walletAIt == wallets.end() || walletBIt == wallets.end()) {
        cout << "Vi khong tim thay! Du lieu khong dong nhat.\n";
        return;
    }

    Wallet& walletA = walletAIt->second;
    Wallet& walletB = walletBIt->second;

    if (walletA.balance < amount) {
        cout << "So du khong du!\n";
        return;
    }

    string otp = sinhOTP();
    cout << "OTP giao dich: " << otp << "\nNhap OTP: ";
    string enteredOtp;
    cin >> enteredOtp;

    if (enteredOtp != otp) {
        cout << "OTP khong hop le! Giao dich bi huy.\n";
        return;
    }

    walletA.balance -= amount;
    walletB.balance += amount;
    string log = "Chuyen " + to_string(amount) + " tu " + fromUser + " den " + toUser + " luc " + to_string(time(0));
    walletA.transactionLog.push_back(log);
    walletB.transactionLog.push_back(log);
    luuDuLieu();
    cout << "Giao dich thanh cong!\n";
}

// Bao cao vi
void xemVi(string username) {
    auto it = users.find(username);
    if (it == users.end()) {
        cout << "Nguoi dung khong tim thay!\n";
        return;
    }
    auto walletIt = wallets.find(it->second.walletId);
    if (walletIt == wallets.end()) {
        cout << "Vi khong tim thay!\n";
        return;
    }
    Wallet& wallet = walletIt->second;
    cout << "ID Vi: " << wallet.walletId << "\n";
    cout << "So du: " << wallet.balance << " diem (" << (wallet.balance * DOLLARS_PER_POINT) << " do)\n";
    cout << "Lich su giao dich:\n";
    for (const auto& log : wallet.transactionLog) {
        cout << log << "\n";
    }
}

// Hien thi danh sach nguoi dung (danh cho quan ly)
void xemDanhSachNguoiDung(string manager) {
    if (!users[manager].isManager) {
        cout << "Chi quan ly moi co the xem danh sach nguoi dung!\n";
        return;
    }

    cout << "\nDanh sach nguoi dung:\n";
    cout << "----------------------------------------\n";
    for (const auto& pair : users) {
        const User& user = pair.second;
        cout << "Ten dang nhap: " << user.username << "\n";
        cout << "Ho ten: " << user.fullName << "\n";
        cout << "Email: " << user.email << "\n";
        cout << "ID Vi: " << user.walletId << "\n";
        cout << "La quan ly: " << (user.isManager ? "Co" : "Khong") << "\n";
        cout << "----------------------------------------\n";
    }
}

// Chuong trinh chinh
int main() {
    taiDuLieu();

    if (wallets.empty()) {
        wallets.emplace(0, Wallet(0, 10000));
        users.emplace("admin", User("admin", hashPassword("admin@123"), "Quan Ly", "admin@example.com", 0, true));
        luuDuLieu();
    }

    string nguoiDungDangNhap;
    int luaChon;
    while (true) {
        cout << "\n1. Dang ky\n2. Dang nhap\n3. Doi mat khau\n4. Cap nhat thong tin\n5. Chuyen diem\n6. Xem vi\n7. Dang ky boi quan ly\n8. Xem danh sach nguoi dung (Quan ly)\n9. Cap nhat thong tin boi quan ly\n10. Nap diem\n11. Thoat\nLua chon: ";
        if (!(cin >> luaChon)) {
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            cout << "Nhap sai! Vui long nhap so.\n";
            continue;
        }

        switch (luaChon) {
            case 1:
                dangKy();
                break;
            case 2:
                dangNhap(nguoiDungDangNhap);
                break;
            case 3:
                if (!nguoiDungDangNhap.empty()) {
                    doiMatKhau(nguoiDungDangNhap);
                } else {
                    cout << "Vui long dang nhap truoc!\n";
                }
                break;
            case 4:
                if (!nguoiDungDangNhap.empty()) {
                    capNhatThongTin(nguoiDungDangNhap);
                } else {
                    cout << "Vui long dang nhap truoc!\n";
                }
                break;
            case 5:
                if (!nguoiDungDangNhap.empty()) {
                    string toUser;
                    int amount;
                    cout << "Nhap ten nguoi nhan: ";
                    cin >> toUser;
                    cout << "Nhap so diem: ";
                    if (!(cin >> amount)) {
                        cin.clear();
                        cin.ignore(numeric_limits<streamsize>::max(), '\n');
                        cout << "So diem khong hop le!\n";
                        break;
                    }
                    chuyenDiem(nguoiDungDangNhap, toUser, amount);
                } else {
                    cout << "Vui long dang nhap truoc!\n";
                }
                break;
            case 6:
                if (!nguoiDungDangNhap.empty()) {
                    xemVi(nguoiDungDangNhap);
                } else {
                    cout << "Vui long dang nhap truoc!\n";
                }
                break;
            case 7:
                if (!nguoiDungDangNhap.empty() && users[nguoiDungDangNhap].isManager) {
                    dangKy(true);
                } else {
                    cout << "Chi quan ly moi co the dang ky nguoi dung!\n";
                }
                break;
            case 8:
                if (!nguoiDungDangNhap.empty()) {
                    xemDanhSachNguoiDung(nguoiDungDangNhap);
                } else {
                    cout << "Vui long dang nhap truoc!\n";
                }
                break;
            case 9:
                if (!nguoiDungDangNhap.empty() && users[nguoiDungDangNhap].isManager) {
                    string targetUser;
                    cout << "Nhap ten dang nhap can cap nhat: ";
                    cin >> targetUser;
                    capNhatThongTinBoiQuanLy(nguoiDungDangNhap, targetUser);
                } else {
                    cout << "Chi quan ly moi co the cap nhat thong tin!\n";
                }
                break;
            case 10:
                if (!nguoiDungDangNhap.empty()) {
                    napDiem(nguoiDungDangNhap);
                } else {
                    cout << "Vui long dang nhap truoc!\n";
                }
                break;
            case 11:
                cout << "Thoat...\n";
                return 0;
            default:
                cout << "Lua chon khong hop le!\n";
        }
    }
    return 0;
}
