#include<bits/stdc++.h>

#include <curl/curl.h>
using namespace std;

// Ty le quy doi
const double DOLLARS_PER_POINT = 10.0; // 10 do = 1 diem

// Lop Vi
class Wallet {
public:
    int walletId;
    int balance;
    vector<string> transactionLog;

    Wallet() : walletId(-1), balance(0) {}
    Wallet(int id, int initialBalance = 0) : walletId(id), balance(initialBalance) {}
};

// Lop Nguoi dung
class User {
public:
    string username;
    string passwordHash;
    string fullName;
    string email;
    int walletId;
    bool isManager;
    bool isAutoGenerated;

    User() : username(""), passwordHash(""), fullName(""), email(""), walletId(-1), 
             isManager(false), isAutoGenerated(false) {}
    
    User(string uname, string pwd, string name, string mail, int wId, bool manager = false)
        : username(uname), passwordHash(pwd), fullName(name), email(mail), walletId(wId),
          isManager(manager), isAutoGenerated(false) {}
};

// Danh sach nguoi dung va vi
unordered_map<string, User> users;
unordered_map<int, Wallet> wallets;

// Ham bam mat khau (gia lap voi salt don gian)
string hashPassword(string password) {
    hash<string> hasher;
    string salt = "simpleSalt123";
    return to_string(hasher(password + salt));
}

// Sinh mat khau ngau nhien
string sinhMatKhauNgauNhien() {
    string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    string pwd;
    srand(time(0));
    for (int i = 0; i < 8; i++) {
        pwd += chars[rand() % chars.size()];
    }
    return pwd;
}

// Sinh OTP
string sinhOTP() {
    srand(time(0));
    string otp = "";
    for (int i = 0; i < 6; i++) {
        otp += to_string(rand() % 10);
    }
    return otp;
}

// Callback doc payload cho libcurl
static size_t payload_reader(char *buffer, size_t size, size_t nitems, void *userdata) {
    string &msg = *static_cast<string *>(userdata);
    size_t toCopy = min(msg.size(), size * nitems);
    memcpy(buffer, msg.c_str(), toCopy);
    msg.erase(0, toCopy);
    return toCopy;
}

// Gui OTP qua Gmail SMTP
bool sendOTP(const string &to, const string &otp) {
    CURL *curl = curl_easy_init();
    if (!curl) return false;

    const string from = "tuanvu26062006@gmail.com";  
    const string pass = "edawqedbzmuldaxe";         

    string msg =
        "To: <" + to   + ">\r\n"
        "From: <" + from + ">\r\n"
        "Subject: OTP Code\r\n"
        "\r\n"
        "Your OTP is: " + otp + "\r\n";

    struct curl_slist *recipients = nullptr;
    recipients = curl_slist_append(recipients, ("<" + to + ">").c_str());

    curl_easy_setopt(curl, CURLOPT_USERNAME,   from.c_str());
    curl_easy_setopt(curl, CURLOPT_PASSWORD,   pass.c_str());
    curl_easy_setopt(curl, CURLOPT_URL,        "smtps://smtp.gmail.com:465");
    curl_easy_setopt(curl, CURLOPT_MAIL_FROM,  ("<" + from + ">").c_str());
    curl_easy_setopt(curl, CURLOPT_MAIL_RCPT,  recipients);
    curl_easy_setopt(curl, CURLOPT_USE_SSL,    (long)CURLUSESSL_ALL);
    curl_easy_setopt(curl, CURLOPT_READFUNCTION, payload_reader);
    curl_easy_setopt(curl, CURLOPT_READDATA,     &msg);
    curl_easy_setopt(curl, CURLOPT_UPLOAD,       1L);

    CURLcode res = curl_easy_perform(curl);
    curl_slist_free_all(recipients);
    curl_easy_cleanup(curl);
    return (res == CURLE_OK);
}


// Luu du lieu vao file (dang van ban)
void luuDuLieu() {
    ofstream userFile("users.txt");
    if (!userFile.is_open()) {
        cerr << "Loi: Khong the mo users.txt de ghi!\n";
        return;
    }
    for (const auto& pair : users) {
        const User& user = pair.second;
        userFile << user.username << "|"
                 << user.passwordHash << "|"
                 << user.fullName << "|"
                 << user.email << "|"
                 << user.walletId << "|"
                 << (user.isManager ? "1" : "0") << "|"
                 << (user.isAutoGenerated ? "1" : "0") << "\n";
    }
    userFile.close();

    ofstream walletFile("wallets.txt");
    if (!walletFile.is_open()) {
        cerr << "Loi: Khong the mo wallets.txt de ghi!\n";
        return;
    }
    for (const auto& pair : wallets) {
        const Wallet& wallet = pair.second;
        walletFile << wallet.walletId << "|"
                   << wallet.balance << "|";
        for (size_t i = 0; i < wallet.transactionLog.size(); ++i) {
            walletFile << wallet.transactionLog[i];
            if (i < wallet.transactionLog.size() - 1) walletFile << ";";
        }
        walletFile << "\n";
    }
    walletFile.close();

#ifdef _WIN32
    system("copy users.txt backup_users.txt >nul 2>&1");
    system("copy wallets.txt backup_wallets.txt >nul 2>&1");
#else
    system("cp users.txt backup_users.txt >/dev/null 2>&1");
    system("cp wallets.txt backup_wallets.txt >/dev/null 2>&1");
#endif
    cout << "Du lieu da duoc luu va sao luu.\n";
}

// Doc du lieu tu file (dang van ban)
bool docDuLieuTuFile(const string& userFileName, const string& walletFileName) {
    users.clear();
    wallets.clear();

    ifstream userFile(userFileName);
    if (userFile.is_open()) {
        string line;
        while (getline(userFile, line)) {
            stringstream ss(line);
            string username, passwordHash, fullName, email;
            int walletId;
            bool isManager, isAutoGenerated;

            getline(ss, username, '|');
            getline(ss, passwordHash, '|');
            getline(ss, fullName, '|');
            getline(ss, email, '|');
            ss >> walletId;
            ss.ignore(1);
            ss >> isManager;
            ss.ignore(1);
            ss >> isAutoGenerated;

            users.emplace(username, User(username, passwordHash, fullName, email, walletId, isManager));
            users[username].isAutoGenerated = isAutoGenerated;
        }
        userFile.close();
    } else {
        cout << "Khong tim thay du lieu nguoi dung trong " << userFileName << ". Bat dau moi.\n";
        return false;
    }

    ifstream walletFile(walletFileName);
    if (walletFile.is_open()) {
        string line;
        while (getline(walletFile, line)) {
            stringstream ss(line);
            int walletId, balance;
            string transactions;

            ss >> walletId;
            ss.ignore(1);
            ss >> balance;
            ss.ignore(1);
            getline(ss, transactions);

            Wallet wallet(walletId, balance);
            if (!transactions.empty()) {
                stringstream transStream(transactions);
                string trans;
                while (getline(transStream, trans, ';')) {
                    wallet.transactionLog.push_back(trans);
                }
            }
            wallets.emplace(walletId, wallet);
        }
        walletFile.close();
    } else {
        cout << "Khong tim thay du lieu vi trong " << walletFileName << ". Bat dau moi.\n";
        return false;
    }
    return true;
}

// Tai du lieu, thu tu file chinh, neu that bai thi tu file sao luu
void taiDuLieu() {
    if (!docDuLieuTuFile("users.txt", "wallets.txt")) {
        cout << "Dang thu tai tu ban sao luu...\n";
        if (!docDuLieuTuFile("backup_users.txt", "backup_wallets.txt")) {
            cout << "File sao luu khong tim thay. Bat dau moi.\n";
        } else {
            cout << "Du lieu da duoc tai tu ban sao luu.\n";
        }
    } else {
        cout << "Du lieu da duoc tai thanh cong.\n";
    }
}

// Khai bao ham truoc khi su dung
void doiMatKhau(string username);
void napDiem(string username);

// Dang ky
void dangKy(bool byManager = false) {
    string username, password, fullName, email;
    cout << "Nhap ten dang nhap: "; cin >> username;
    if (users.count(username)) { cout << "Nguoi dung da ton tai!\n"; return; }
    cin.ignore(); cout << "Nhap ho ten: "; getline(cin, fullName);
    cout << "Nhap email: "; cin >> email;
    if (byManager) {
        password = sinhOTP();
        cout << "Mat khau tu sinh: " << password << "\n";
    } else {
        cout << "Nhap mat khau: "; cin >> password;
    }
    string otp = sinhOTP();
    // Gui OTP den email
    cout << "Dang gui OTP dang ky toi email " << email << "...\n";
    if (!sendOTP(email, otp)) {
        cout << "Khong the gui OTP. Vui long thu lai.\n";
        return;
    }
    cout << "Nhap ma OTP: "; string entered; cin >> entered;
    if (entered != otp) { cout << "OTP khong hop le! Dang ky that bai.\n"; return; }
    // =============================================================
    int wid = wallets.size();
    users[username] = User(username, hashPassword(password), fullName, email, wid, byManager);
    wallets[wid] = Wallet(wid);
    luuDuLieu();
    cout << "Dang ky thanh cong!\n";
}

// Dang nhap
bool dangNhap(string &loggedUser) {
    string username, password;
    cout << "Nhap ten dang nhap: "; cin >> username;
    cout << "Nhap mat khau: "; cin >> password;
    // Dang nhap duoi quyen admin thi khong can OTP
    if (username == "admin" && password == "admin@123") {
        loggedUser = username;
        cout << "Dang nhap admin thanh cong (khong can OTP)!\n";
        return true;
    }
    if (!users.count(username) || users[username].passwordHash != hashPassword(password)) {
        cout << "Sai ten hoac mat khau!\n"; return false; }
    string otp = sinhOTP();
    // Gui OTP den email
    cout << "Dang gui OTP dang nhap toi email " << users[username].email << "...\n";
    if (!sendOTP(users[username].email, otp)) {
        cout << "Khong the gui OTP. Vui long thu lai.\n";
        return false;
    }
    cout << "Nhap ma OTP: "; string entered; cin >> entered;
    if (entered != otp) { cout << "OTP khong hop le! Dang nhap that bai.\n"; return false; }
    // =============================================================
    loggedUser = username;
    cout << "Dang nhap thanh cong!\n";
    return true;
}

// Doi mat khau
void doiMatKhau(string username) {
    auto it = users.find(username);
    if (it == users.end()) {
        cout << "Nguoi dung khong tim thay!\n";
        return;
    }

    string newPassword, otp = sinhOTP();
    cout << "Dang gui OTP doi mat khau toi email " << users[username].email << "...\n";
    if (!sendOTP(users[username].email, otp)) {
    cout << "Khong the gui OTP. Thu lai sau!\n";
    return;
}
cout << "Nhap OTP: ";

    string enteredOtp;
    cin >> enteredOtp;

    if (cin.fail() || enteredOtp != otp) {
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        cout << "OTP khong hop le!\n";
        return;
    }

    cout << "Nhap mat khau moi: ";
    cin >> newPassword;
    if (cin.fail()) {
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        cout << "Nhap sai!\n";
        return;
    }

    it->second.passwordHash = hashPassword(newPassword);
    it->second.isAutoGenerated = false;
    luuDuLieu();
    cout << "Doi mat khau thanh cong!\n";
}

// Cap nhat thong tin ca nhan (nguoi dung tu cap nhat)
void capNhatThongTin(string &username) {
    auto it = users.find(username);
    if (it == users.end()) return;

    // A. Gui OTP xac thuc truoc khi cap nhat
    string initOtp = sinhOTP();
    cout << "Dang gui OTP xac thuc cap nhat thong tin toi email hien tai "
         << it->second.email << "...\n";
    if (!sendOTP(it->second.email, initOtp)) {
        cout << "Khong the gui OTP. Huy cap nhat.\n";
        return;
    }
    cout << "Nhap OTP: ";
    string entered;
    cin >> entered;
    if (entered != initOtp) {
        cout << "OTP khong hop le. Huy cap nhat.\n";
        return;
    }
    // 1. Nhap thong tin moi (bo trong neu khong doi)
    string newUsername, newPassword, newName, newEmail;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
    cout << "Nhap ten dang nhap moi (bo trong neu khong doi): ";
    getline(cin, newUsername);
    cout << "Nhap mat khau moi (bo trong neu khong doi): ";
    getline(cin, newPassword);
    cout << "Nhap ho ten moi (bo trong neu khong doi): ";
    getline(cin, newName);
    cout << "Nhap email moi (bo trong neu khong doi): ";
    getline(cin, newEmail);

    // 2. Hien thi tom tat thay doi
    cout << "\n--- Xac nhan thay doi ---\n";
    if (!newUsername.empty()) cout << "   Username: " << newUsername << "\n";
    if (!newPassword.empty()) cout << "   Password: ********\n";
    if (!newName.empty())     cout << "   Ho ten: "    << newName     << "\n";
    if (!newEmail.empty())    cout << "   Email: "     << newEmail    << "\n";
    cout << "------------------------\n";

    // 3. Neu doi email, gui OTP thang den email moi
    if (!newEmail.empty()) {
        string otp = sinhOTP();
        cout << "Dang gui OTP den email moi " << newEmail << "...\n";
        if (!sendOTP(newEmail, otp)) {
            cout << "Khong the gui OTP. Huy thay doi.\n";
            return;
        }
        cout << "Nhap OTP: ";
        string entered; cin >> entered;
        if (entered != otp) {
            cout << "OTP khong hop le. Huy thay doi.\n";
            return;
        }
    }

    // 4. Cap nhat vao struct User
    User updated = it->second;
    if (!newUsername.empty()) {
        if (users.count(newUsername)) {
            cout << "Username moi da ton tai! Huy thay doi.\n";
            return;
        }
        updated.username = newUsername;
    }
    if (!newPassword.empty()) {
        updated.passwordHash   = hashPassword(newPassword);
        updated.isAutoGenerated = false;
    }
    if (!newName.empty())     updated.fullName = newName;
    if (!newEmail.empty())    updated.email    = newEmail;

    // 5. Dua ve map, neu doi username thi cap nhat key va bien dang nhap
    if (!newUsername.empty()) {
        users.erase(it);
        users.emplace(newUsername, move(updated));
        username = newUsername;
    } else {
        it->second = move(updated);
    }

    luuDuLieu();
    cout << "Cap nhat thong tin thanh cong!\n";
}


// Cap nhat thong tin boi quan ly 
void capNhatThongTinBoiQuanLy(const string& manager, const string& targetUser) {
    // 1. Kiem tra quyen quan ly
    if (!users[manager].isManager) {
        cout << "Chi quan ly moi co the cap nhat thong tin!\n";
        return;
    }

    // 2. Tim nguoi dung muc tieu
    auto it = users.find(targetUser);
    if (it == users.end()) {
        cout << "Nguoi dung \"" << targetUser << "\" khong ton tai!\n";
        return;
    }

    // 3. Nhap thong tin moi (bo trong neu khong doi)
    string newUsername, newPassword, newName, newEmail;
    cin.ignore(numeric_limits<streamsize>::max(), '\n'); // don dong truoc
    cout << "Nhap ten dang nhap moi cho " << targetUser << " (bo trong neu khong doi): ";
    getline(cin, newUsername);
    cout << "Nhap mat khau moi cho " << targetUser << " (bo trong neu khong doi): ";
    getline(cin, newPassword);
    cout << "Nhap ho ten moi cho " << targetUser << " (bo trong neu khong doi): ";
    getline(cin, newName);
    cout << "Nhap email moi cho " << targetUser << " (bo trong neu khong doi): ";
    getline(cin, newEmail);

    // 4. Hien thi ban tom tat cac thay doi
    cout << "\n--- Xac nhan thay doi cho " << targetUser << " ---\n";
    if (!newUsername.empty()) cout << "   Ten dang nhap: " << newUsername << "\n";
    if (!newPassword.empty()) cout << "   Mat khau: ********\n";
    if (!newName.empty())     cout << "   Ho ten: "     << newName     << "\n";
    if (!newEmail.empty())    cout << "   Email: "      << newEmail    << "\n";
    cout << "-------------------------------------\n";

    // 5. Neu thay doi email, gui va xac thuc OTP den EMAIL MOI
    if (!newEmail.empty()) {
        string otp = sinhOTP();
        cout << "Dang gui OTP den email moi " << newEmail << "...\n";
        if (!sendOTP(newEmail, otp)) {
            cout << "Khong the gui OTP. Vui long thu lai sau!\n";
            return;
        }
        cout << "Nhap OTP vua nhan tren email " << newEmail << ": ";
        string enteredOtp;
        cin >> enteredOtp;
        if (enteredOtp != otp) {
            cout << "OTP khong hop le! Cap nhat bi huy.\n";
            return;
        }
    }

    // 6. Ap dung thay doi
    User updated = it->second;
    // – Doi username (can kiem tra trung)
    if (!newUsername.empty()) {
        if (users.count(newUsername)) {
            cout << "Ten dang nhap moi da ton tai! Cap nhat khong thanh cong.\n";
            return;
        }
        updated.username = newUsername;
    }
    // – Doi password
    if (!newPassword.empty()) {
        updated.passwordHash   = hashPassword(newPassword);
        updated.isAutoGenerated = false;
    }
    // – Doi ho ten
    if (!newName.empty()) {
        updated.fullName = newName;
    }
    // – Doi email
    if (!newEmail.empty()) {
        updated.email = newEmail;
    }

    // 7. Neu doi username, xoa ban cu va them ban moi
    if (!newUsername.empty()) {
        users.erase(it);
        users.emplace(newUsername, move(updated));
    } else {
        it->second = move(updated);
    }

    // 8. Luu file va thong bao
    luuDuLieu();
    cout << "Cap nhat thong tin nguoi dung thanh cong!\n";
}

// Nap diem (10 do = 1 diem)
void napDiem(string username) {
    auto it = users.find(username);
    if (it == users.end()) {
        cout << "Nguoi dung khong tim thay!\n";
        return;
    }

    int walletId = it->second.walletId;
    auto walletIt = wallets.find(walletId);
    if (walletIt == wallets.end()) {
        cout << "Vi khong tim thay!\n";
        return;
    }

    double dollars;
    cout << "Nhap so tien nap (tinh bang do, 10 do = 1 diem): ";
    if (!(cin >> dollars)) {
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        cout << "So tien khong hop le!\n";
        return;
    }

    if (dollars <= 0) {
        cout << "So tien phai lon hon 0!\n";
        return;
    }

    string otp = sinhOTP();
    cout << "Dang gui OTP nap diem toi email " << it->second.email << "...\n";
    if (!sendOTP(it->second.email, otp)) {
    cout << "Khong the gui OTP. Thu lai sau!\n";
    return;
}
cout << "Nhap OTP: ";

    string enteredOtp;
    cin >> enteredOtp;

    if (enteredOtp != otp) {
        cout << "OTP khong hop le! Nap diem bi huy.\n";
        return;
    }

    int points = static_cast<int>(dollars / DOLLARS_PER_POINT);
    if (points == 0) {
        cout << "So tien qua nho de quy doi thanh diem (toi thieu 10 do)!\n";
        return;
    }

    Wallet& wallet = walletIt->second;
    wallet.balance += points;
    string log = "Nap " + to_string(points) + " diem (" + to_string(dollars) + " do) luc " + to_string(time(0));
    wallet.transactionLog.push_back(log);
    luuDuLieu();
    cout << "Nap thanh cong " << points << " diem!\n";
}

// Chuyen diem
void chuyenDiem(string fromUser, string toUser, int amount) {
    auto sender = users.find(fromUser);
    auto receiver = users.find(toUser);
    if (sender == users.end() || receiver == users.end()) {
        cout << "Nguoi dung khong ton tai!\n";
        return;
    }

    int fromWalletId = sender->second.walletId;
    int toWalletId = receiver->second.walletId;

    auto walletAIt = wallets.find(fromWalletId);
    auto walletBIt = wallets.find(toWalletId);
    if (walletAIt == wallets.end() || walletBIt == wallets.end()) {
        cout << "Vi khong tim thay! Du lieu khong dong nhat.\n";
        return;
    }

    Wallet& walletA = walletAIt->second;
    Wallet& walletB = walletBIt->second;

    if (walletA.balance < amount) {
        cout << "So du khong du!\n";
        return;
    }

    string otp = sinhOTP();
    cout << "Dang gui OTP giao dich toi email " << sender->second.email << "...\n";
    if (!sendOTP(sender->second.email, otp)) {
    cout << "Khong the gui OTP. Thu lai sau!\n";
    return;
}
cout << "Nhap OTP: ";

    string enteredOtp;
    cin >> enteredOtp;

    if (enteredOtp != otp) {
        cout << "OTP khong hop le! Giao dich bi huy.\n";
        return;
    }

    walletA.balance -= amount;
    walletB.balance += amount;
    string log = "Chuyen " + to_string(amount) + " tu " + fromUser + " den " + toUser + " luc " + to_string(time(0));
    walletA.transactionLog.push_back(log);
    walletB.transactionLog.push_back(log);
    luuDuLieu();
    cout << "Giao dich thanh cong!\n";
}

// Bao cao vi
void xemVi(string username) {
    auto it = users.find(username);
    if (it == users.end()) {
        cout << "Nguoi dung khong tim thay!\n";
        return;
    }
    auto walletIt = wallets.find(it->second.walletId);
    if (walletIt == wallets.end()) {
        cout << "Vi khong tim thay!\n";
        return;
    }
    Wallet& wallet = walletIt->second;
    cout << "ID Vi: " << wallet.walletId << "\n";
    cout << "So du: " << wallet.balance << " diem (" << (wallet.balance * DOLLARS_PER_POINT) << " do)\n";
    cout << "Lich su giao dich:\n";
    for (const auto& log : wallet.transactionLog) {
        cout << log << "\n";
    }
}

// Hien thi danh sach nguoi dung (danh cho quan ly)
void xemDanhSachNguoiDung(string manager) {
    if (!users[manager].isManager) {
        cout << "Chi quan ly moi co the xem danh sach nguoi dung!\n";
        return;
    }

    cout << "\nDanh sach nguoi dung:\n";
    cout << "----------------------------------------\n";
    for (const auto& pair : users) {
        const User& user = pair.second;
        cout << "Ten dang nhap: " << user.username << "\n";
        cout << "Ho ten: " << user.fullName << "\n";
        cout << "Email: " << user.email << "\n";
        cout << "ID Vi: " << user.walletId << "\n";
        cout << "La quan ly: " << (user.isManager ? "Co" : "Khong") << "\n";
        cout << "----------------------------------------\n";
    }
}

// Chuong trinh chinh
int main() {
    taiDuLieu();

    if (wallets.empty()) {
        wallets.emplace(0, Wallet(0, 10000));
        users.emplace("admin", User("admin", hashPassword("admin@123"), "Quan Ly", "admin@example.com", 0, true));
        luuDuLieu();
    }

    string nguoiDungDangNhap;
    int luaChon;
    while (true) {
        cout << "\n1. Dang ky\n2. Dang nhap\n3. Doi mat khau\n4. Cap nhat thong tin\n5. Chuyen diem\n6. Xem vi\n7. Dang ky boi quan ly\n8. Xem danh sach nguoi dung (Quan ly)\n9. Cap nhat thong tin boi quan ly\n10. Nap diem\n11. Thoat\nLua chon: ";
        if (!(cin >> luaChon)) {
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            cout << "Nhap sai! Vui long nhap so.\n";
            continue;
        }

        switch (luaChon) {
            case 1:
                dangKy();
                break;
            case 2:
                dangNhap(nguoiDungDangNhap);
                break;
            case 3:
                if (!nguoiDungDangNhap.empty()) {
                    doiMatKhau(nguoiDungDangNhap);
                } else {
                    cout << "Vui long dang nhap truoc!\n";
                }
                break;
            case 4:
                if (!nguoiDungDangNhap.empty()) {
                    capNhatThongTin(nguoiDungDangNhap);
                } else {
                    cout << "Vui long dang nhap truoc!\n";
                }
                break;
            case 5:
                if (!nguoiDungDangNhap.empty()) {
                    string toUser;
                    int amount;
                    cout << "Nhap ten nguoi nhan: ";
                    cin >> toUser;
                    cout << "Nhap so diem: ";
                    if (!(cin >> amount)) {
                        cin.clear();
                        cin.ignore(numeric_limits<streamsize>::max(), '\n');
                        cout << "So diem khong hop le!\n";
                        break;
                    }
                    chuyenDiem(nguoiDungDangNhap, toUser, amount);
                } else {
                    cout << "Vui long dang nhap truoc!\n";
                }
                break;
            case 6:
                if (!nguoiDungDangNhap.empty()) {
                    xemVi(nguoiDungDangNhap);
                } else {
                    cout << "Vui long dang nhap truoc!\n";
                }
                break;
            case 7:
                if (!nguoiDungDangNhap.empty() && users[nguoiDungDangNhap].isManager) {
                    dangKy(true);
                } else {
                    cout << "Chi quan ly moi co the dang ky nguoi dung!\n";
                }
                break;
            case 8:
                if (!nguoiDungDangNhap.empty()) {
                    xemDanhSachNguoiDung(nguoiDungDangNhap);
                } else {
                    cout << "Vui long dang nhap truoc!\n";
                }
                break;
            case 9:
                if (!nguoiDungDangNhap.empty() && users[nguoiDungDangNhap].isManager) {
                    string targetUser;
                    cout << "Nhap ten dang nhap can cap nhat: ";
                    cin >> targetUser;
                    capNhatThongTinBoiQuanLy(nguoiDungDangNhap, targetUser);
                } else {
                    cout << "Chi quan ly moi co the cap nhat thong tin!\n";
                }
                break;
            case 10:
                if (!nguoiDungDangNhap.empty()) {
                    napDiem(nguoiDungDangNhap);
                } else {
                    cout << "Vui long dang nhap truoc!\n";
                }
                break;
            case 11:
                cout << "Thoat...\n";
                return 0;
            default:
                cout << "Lua chon khong hop le!\n";
        }
    }
    return 0;
}
